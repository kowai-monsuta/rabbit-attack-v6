Practice quiz:

The following questions should be answered after completing v5 of the game
Rabbit Attack.

a. What is the first statement executed when the program is run?


The start function

b. What happens if a player enters 'Yes' for to the question "Shall we 
  use the Holy Hand Grenade?"


Command to use grenade is set to true and 
The bunny rabbit is defeated and the player wins the game

c. How many knights begin the attack?


Starts out with five

d. Which statement reduces the number of living knights by one?

else:
           num_knights -= 1
           print("Oh, no! The rabbit just killed one of the knights!")
           print("Only " + str(num_knights) + " remain.")

e. Suppose during game play you see the sentence, "All of the knights are 
  dead. You lose." What values are stored in the variables rabbit_is_alive, 
  use_grenade, and num_knights respectively at that point?

 num_knights = 5
rabbit_is_alive = True


while rabbit_is_alive and num_knights > 0:
       use_grenade = confirm("Shall we use the Holy Hand Grenade?")
           
       if use_grenade:
           print("1... 2... 5... No, 3!")
           print("Boom!")
           rabbit_is_alive = False
       else:
           num_knights -= 1
           print("Oh, no! The rabbit just killed one of the knights!")
           print("Only " + str(num_knights) + " remain.")
       
   if num_knights > 0:
       print("The killer rabbit has been defeated. You win!")
   else:
       print("All of the knights are dead. You lose.")

f. Suppose during game play you see the sentence, "Goodbye. Thanks for playing!"
  What value is stored in the variable playing at that point?

def end():
   print("Goodbye. Thanks for playing!")

g. Suppose you play the game and your answers to the question "Shall we 
  use the Holy Hand Grenade?" are as follows:
  
                n, No, no, nope, yup, y
                
  How many knights died?

Only three remain

h. Referring to question g - What are the values stored in rabbit_is_alive,
  use_grenade, and num_knights respectively after the last input?

If not use_grenade:
Return num_knights == false and rabbit_is_alive == true

Make a copy of the program called rabbit_attack_v6.py.

i. Edit the confirm function so that it is not case sensitive. That is,
  answers such as Yes, YES, and yEs should all be treated the same.

def confirm(question):
   while True:
       answer = input(question + " (y/n)")

       if answer in ["y" , "yes", "Yes", "YeS", "YES", "yEs", "yup",
                     "YUP", "Yea", "yea", "yeah", "Yeah"]:
           return True
       elif answer in ["n", "no", "nope", "NO"]:
           return False


( I don’t remember if there was an easier way to do this or what it was)

j. Compare this version to the original (v1). How would adding the features
  in part 1 have been more difficult if the game wasn't refactored
  to use a confirm function?

If you wanted to add a list of several inputs that are similar to y. You would have to write different code for it to work to make it now when the user wants to use the grenade. It would be a longer process than just adding similar inputs to a list. 

k. List several inputs that could be used to 'unit test' your
  case-insensitive confirm function.


Yes, yes, YeS, YES, yEs, yup, YUP, Yea, yeah, etc.

l. Explain how parts of your code become reusable because of refactoring.
  Describe another application where you may be able to use the confirm
  function in multiple instances.


start()

playing = True

while playing:
   play()
   playing = confirm("Would you like to play again?")

end()


This will keep repeating if you confirm that you would like to play again otherwise it will return false and the game will end.

m. Make cool start and end screens using ascii art.

Welcome to RABBIT ATTACK!


   ***         
  ** **
 **   **
 **   **         **** 
 **   **       **   ****
 **  **       *   **   **
  **  *      *  **  ***  **
   **  *    *  **     **  *
    ** **  ** **        **
    **   **  **
   *           *
  *             *
 *    0     0    *
 *   /   @   \   *
 *   \__/ \__/   *
   *     W     *
     **     **   
       *****  
Look, a cute little bunny rabbit.